#!/bin/bash -e
READLINK_EXEC="readlink -zf"
MKTEMP_EXEC="mktemp --suffix=.cid"
if [[ "$OSTYPE" =~ 'darwin' ]]; then
  READLINK_EXEC="readlink"
  MKTEMP_EXEC="mktemp"
  ! type -a "greadlink" >&"/dev/null" || READLINK_EXEC="greadlink"
  ! type -a "gmktemp" >&"/dev/null" || MKTEMP_EXEC="gmktemp"
fi

SCRIPT_DIR=$(dirname $0)
_dir="$(dirname "${BASH_SOURCE[0]}")"
test_dir="$($READLINK_EXEC ${_dir} || echo ${_dir})"
log_file=$test_dir/test.log
s2i_log_file=$test_dir/s2i.log
cid_file=$test_dir/test.cid

SNIPPETS_TARGET=/config/configDropins/overrides

DEPLOY_TO_APPS_VAR="-e DEPLOY_TO_APPS=true"

# Since we built the image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never"

test_port=9080
test_root=sample

image_exists() {
  echo "Checking image $1"
  docker inspect $1 &>/dev/null
}


container_exists() {
  echo "Checking container $(cat $cid_file)"
  image_exists $(cat $cid_file)
}

container_ip() {
  docker inspect --format='{{(index (index .NetworkSettings.Ports "9080/tcp") 0).HostIp}}' $(cat $cid_file) | sed 's/0.0.0.0/localhost/'
}

container_port() {
  docker inspect --format="{{"{{"}}(index .NetworkSettings.Ports \"$test_port/tcp\" 0).HostPort {{"}}"}}" "$(cat "${cid_file}")"
}


prepare() {
  app=$1
  shift
  if ! image_exists ${BUILD_IMAGE_NAME}:${IMAGE_VERSION}; then
    echo "ERROR: The image ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} must exist before this script is executed."
    exit 1
  fi
  if ! image_exists ${BUILD_IMAGE_NAME}:${RUNTIME_IMAGE_VERSION}; then
    echo "ERROR: The image ${BUILD_IMAGE_NAME}:${RUNTIME_IMAGE_VERSION} must exist before this script is executed."
    exit 1
  fi

  echo "s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-testapp $@"
  s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-testapp $@ >& $s2i_log_file
  echo "s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-runtime-testapp --runtime-image ${BUILD_IMAGE_NAME}:${RUNTIME_IMAGE_VERSION} --runtime-artifact /opt/ol/wlp/usr $@"
  s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-runtime-testapp --runtime-image ${BUILD_IMAGE_NAME}:${RUNTIME_IMAGE_VERSION} --runtime-artifact /opt/ol/wlp/usr $@ >& $s2i_log_file

 }

run_test_application_runtime() {
  docker run $@ --rm $1 -p ${test_port}:${test_port} --cidfile=${cid_file} ${BUILD_IMAGE_NAME}-runtime-testapp  >& $log_file
}

run_test_application() {
  docker run $@ --rm -p ${test_port}:${test_port} --cidfile=${cid_file} ${BUILD_IMAGE_NAME}-testapp >& $log_file
}



cleanupContainer() {
   echo "Cleanup for test, cid $(cat $cid_file)"
  if container_exists; then  
    if [[ $1 != "0" ]]; then
      echo "Viewing docker logs"
      docker logs $(cat $cid_file)
    fi
    echo "Stopping container $(cat $cid_file)"
    docker stop $(cat $cid_file) || true
  fi
   rm -f $cid_file
}

cleanupImages() {  
  if image_exists ${BUILD_IMAGE_NAME}-testapp; then
    docker rmi -f ${BUILD_IMAGE_NAME}-testapp
  fi
  if image_exists ${BUILD_IMAGE_NAME}-runtime-testapp; then
    docker rmi -f ${BUILD_IMAGE_NAME}-runtime-testapp
  fi
  rm -rf ${test_dir}/test-app/.git
 
}

cleanupFinal() {
  rm -f $log_file
  rm -f $s2i_log_file
  rm -f $cid_file
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    cleanupContainer 1
    echo "S2I image '${BUILD_IMAGE_NAME}' test FAILED (exit code: ${result}), last container execution log file in $log_file"
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=30
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && [ -s $cid_file ] && break
    echo "Waiting for container start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

run_test_usage() {
  echo "s2i usage ${s2i_args} ${BUILD_IMAGE_NAME}:${IMAGE_VERSION}"
  s2i usage ${s2i_args} ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} &>/dev/null
}

run_test_incremental() {
  set +e
  echo "s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-incremental-testapp --incremental >& $s2i_log_file"
  s2i build ${s2i_args} ${test_dir}/$app ${BUILD_IMAGE_NAME}:${IMAGE_VERSION} ${BUILD_IMAGE_NAME}-incremental-testapp --incremental >& $s2i_log_file
  check_result $?
  set -e
}

test_connection() {
  local max_attempts=30
  local sleep_time=1
  local attempt=1
  local result=1
  while [ $attempt -le $max_attempts ]; do
    echo "Sending GET request to http://$(container_ip):${test_port}/${test_root}/  [$attempt]"
    set +e
    response_code=$(curl -s -w %{http_code} -o /dev/null http://$(container_ip):${test_port}/${test_root}/)
    status=$?
    set -e
    if [ $status -eq 0 ]; then
      echo "Response Code $response_code"
      if [ $response_code -eq 200 ]; then
        result=0
        break
      fi
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  cat $log_file
  return $result
}



echo "Testing builder image $BUILD_IMAGE_NAME"
echo "Last s2i execution is logged in $s2i_log_file"
echo "Last container execution is logged in $log_file"

echo "### Test deployment in default server using the apps directory and a provided server.xml."
prepare test-app-rest $DEPLOY_TO_APPS_VAR

# Verify the 'usage' script is working properly
run_test_usage
check_result $?

# Verify building incremental is working properly
run_test_incremental

# Verify that the HTTP connection can be established to test application container
run_test_application &

# Wait for the container to write it's CID file
#
wait_for_cid

test_connection
check_result $?

cleanupContainer 0

echo "### Testing the runtime image"
run_test_application_runtime &
wait_for_cid
test_connection
check_result $?

# Remove built containers and images
cleanupContainer
cleanupImages
cleanupFinal

echo "### Test deployment in default server with dropins app."
prepare test-app

# Verify that the HTTP connection can be established to test application container
run_test_application &

# Wait for the container to write it's CID file
#
wait_for_cid

test_connection
check_result $?

cleanupContainer

run_test_application_runtime &
wait_for_cid
test_connection
check_result $?
cleanupContainer
cleanupImages

cleanupFinal



# END CONFIGURATION TESTS
echo "Test SUCCESSFUL"
